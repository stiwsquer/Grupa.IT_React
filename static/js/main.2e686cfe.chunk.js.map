{"version":3,"sources":["components/Layout.style.js","components/Layout.js","GlobalStyles.js","App.js","reportWebVitals.js","index.js"],"names":["LayoutRoot","styled","display","flexDirection","alignItems","justifyContent","height","color","backgroundSize","objectFit","Quote","position","minHeight","padding","Options","Layout","useState","quotes","setQuotes","randomQuote","setRandomQuote","previousQuote","setPreviousQuote","fetchQuotes","a","fetch","res","json","getRandomQuote","Math","floor","random","length","useEffect","ButtonGroup","variant","Button","disabled","onClick","Typography","quote","sx","bottom","right","author","useStyles","makeStyles","createStyles","boxSizing","margin","html","width","overflowX","body","backgroundColor","GlobalStyles","App","StyledEngineProvider","injectFirst","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAEaA,EAAaC,YAAO,MAAPA,CAAc,CACtCC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,eAAgB,SAChBC,OAAQ,OACRC,MAAO,UACPC,eAAgB,QAChBC,UAAW,UAGAC,EAAQT,YAAO,MAAPA,CAAA,aACnBU,SAAU,WACVC,UAAW,OACXV,QAAS,OACTG,eAAgB,SAChBD,WAAY,SACZS,QAAS,QAER,2BAA6B,CAC5BA,QAAS,UAIAC,EAAUb,YAAO,MAAPA,CAAc,CACnCW,UAAW,S,OCvBE,SAASG,IACtB,MAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAsCF,mBAAS,IAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAA0CJ,mBAAS,IAAnD,mBAAOK,EAAP,KAAsBC,EAAtB,KAEMC,EAAW,uCAAG,4BAAAC,EAAA,sEACFC,MACd,yIAFgB,cACdC,EADc,gBAINA,EAAIC,OAJE,OAIlBD,EAJkB,OAKlBR,EAAUQ,GALQ,2CAAH,qDAQXE,EAAiB,WACjBT,GAAaG,EAAiBH,GAClCC,EAAeH,EAAOY,KAAKC,MAAMD,KAAKE,SAAWd,EAAOe,WAkB1D,OARAC,qBAAU,WACRV,MACC,IAEHU,qBAAU,WACRL,MACC,CAACX,IAGF,eAACjB,EAAD,WACE,cAACc,EAAD,UACE,eAACoB,EAAA,EAAD,CAAaC,QAAQ,WAArB,UACE,cAACC,EAAA,EAAD,CAAQC,UAAWhB,EAAeiB,QAnBjB,WACnBjB,IACFD,EAAeC,GACfC,EAAiB,MAgBb,sBAGA,cAACc,EAAA,EAAD,CAAQE,QAASV,EAAjB,2BAIJ,eAAClB,EAAD,WACE,cAAC6B,EAAA,EAAD,CAAYJ,QAAQ,KAApB,gBAA0BhB,QAA1B,IAA0BA,OAA1B,EAA0BA,EAAaqB,QACvC,cAACD,EAAA,EAAD,CACEE,GAAI,CAAE9B,SAAU,WAAY+B,OAAQ,QAASC,MAAO,QACpDR,QAAQ,KAFV,gBAIGhB,QAJH,IAIGA,OAJH,EAIGA,EAAayB,e,oBCpDlBC,EAAYC,aAAW,kBAC3BC,YAAa,CACX,UAAW,CACT,IAAK,CACHC,UAAW,aACXC,OAAQ,EACRpC,QAAS,GAEXqC,KAAM,CACJ5C,OAAQ,OACR6C,MAAO,OACPC,UAAW,UAEbC,KAAM,CACJC,gBAAiB,UACjBhD,OAAQ,OACR6C,MAAO,QAGT,QAAS,CACP7C,OAAQ,OACR6C,MAAO,cAWAI,MALf,WAEE,OADAV,IACO,MCjBMW,MATf,WACE,OACE,eAACC,EAAA,EAAD,CAAsBC,aAAW,EAAjC,UACE,cAAC,EAAD,IACA,cAAC3C,EAAD,QCGS4C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2e686cfe.chunk.js","sourcesContent":["import { styled } from '@mui/material/styles';\r\n\r\nexport const LayoutRoot = styled('div')({\r\n  display: 'flex',\r\n  flexDirection: 'column',\r\n  alignItems: 'center',\r\n  justifyContent: 'center',\r\n  height: '100%',\r\n  color: '#1563BC',\r\n  backgroundSize: 'cover',\r\n  objectFit: 'cover',\r\n});\r\n\r\nexport const Quote = styled('div')({\r\n  position: 'relative',\r\n  minHeight: '20vh',\r\n  display: 'flex',\r\n  justifyContent: 'center',\r\n  alignItems: 'center',\r\n  padding: '4rem',\r\n  // eslint-disable-next-line no-useless-computed-key\r\n  ['@media (max-width:580px)']: {\r\n    padding: '1rem',\r\n  },\r\n});\r\n\r\nexport const Options = styled('div')({\r\n  minHeight: '10vh',\r\n});\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Button, ButtonGroup, Typography } from '@mui/material';\r\nimport { LayoutRoot, Options, Quote } from './Layout.style';\r\n\r\nexport default function Layout() {\r\n  const [quotes, setQuotes] = useState([]);\r\n  const [randomQuote, setRandomQuote] = useState('');\r\n  const [previousQuote, setPreviousQuote] = useState('');\r\n\r\n  const fetchQuotes = async () => {\r\n    let res = await fetch(\r\n      'https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json',\r\n    );\r\n    res = await res.json();\r\n    setQuotes(res);\r\n  };\r\n\r\n  const getRandomQuote = () => {\r\n    if (randomQuote) setPreviousQuote(randomQuote);\r\n    setRandomQuote(quotes[Math.floor(Math.random() * quotes.length)]);\r\n  };\r\n\r\n  const getPreviousQuote = () => {\r\n    if (previousQuote) {\r\n      setRandomQuote(previousQuote);\r\n      setPreviousQuote('');\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchQuotes();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getRandomQuote();\r\n  }, [quotes]);\r\n\r\n  return (\r\n    <LayoutRoot>\r\n      <Options>\r\n        <ButtonGroup variant=\"outlined\">\r\n          <Button disabled={!previousQuote} onClick={getPreviousQuote}>\r\n            Previous\r\n          </Button>\r\n          <Button onClick={getRandomQuote}>Generate</Button>\r\n        </ButtonGroup>\r\n      </Options>\r\n\r\n      <Quote>\r\n        <Typography variant=\"h4\">{randomQuote?.quote}</Typography>\r\n        <Typography\r\n          sx={{ position: 'absolute', bottom: '-3rem', right: '3rem' }}\r\n          variant=\"h5\"\r\n        >\r\n          {randomQuote?.author}\r\n        </Typography>\r\n      </Quote>\r\n    </LayoutRoot>\r\n  );\r\n}\r\n","import { createStyles, makeStyles } from '@mui/styles';\r\n\r\nconst useStyles = makeStyles(() =>\r\n  createStyles({\r\n    '@global': {\r\n      '*': {\r\n        boxSizing: 'border-box',\r\n        margin: 0,\r\n        padding: 0,\r\n      },\r\n      html: {\r\n        height: '100%',\r\n        width: '100%',\r\n        overflowX: 'hidden',\r\n      },\r\n      body: {\r\n        backgroundColor: '#f4f6f8',\r\n        height: '100%',\r\n        width: '100%',\r\n      },\r\n\r\n      '#root': {\r\n        height: '100%',\r\n        width: '100%',\r\n      },\r\n    },\r\n  }),\r\n);\r\n\r\nfunction GlobalStyles() {\r\n  useStyles();\r\n  return null;\r\n}\r\n\r\nexport default GlobalStyles;\r\n","import React from 'react';\nimport { StyledEngineProvider } from '@mui/material/styles';\nimport Layout from './components/Layout';\nimport GlobalStyles from './GlobalStyles';\n\nfunction App() {\n  return (\n    <StyledEngineProvider injectFirst>\n      <GlobalStyles />\n      <Layout />\n    </StyledEngineProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}